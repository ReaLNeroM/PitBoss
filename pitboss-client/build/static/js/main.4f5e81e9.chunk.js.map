{"version":3,"sources":["NavBar.js","FoodStation.js","FoodDeliveryForm.js","MyDeliveriesPanel.js","RequestsPanel.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","title","description","Navbar","bg","expand","Brand","to","Toggle","aria-controls","Collapse","id","Nav","className","Link","as","FoodStation","None","Pit","Starbucks","GrabNGo","FoodDeliveryForm","onFullNameChange","fullName","onDormAndRoomChange","dormAndRoom","onFoodStationChange","foodStation","onOrderNumberChange","orderNumber","htmlFor","type","onChange","name","placeholder","value","disabled","MyDeliveriesPanel","RequestsPanel","requests","haveRequestsLoaded","requestsList","map","req","location","style","marginRight","time","display","src","alt","App","state","event","this","setState","target","path","render","fullNameChanged","bind","dormAndRoomChanged","foodStationChanged","orderNumberChanged","exact","Component","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f5e81e9.chunk.js","sourcesContent":["import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst NavBar = (props) => {\r\n    const {title, description} = props;\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n          <Navbar.Brand to=\"all-requests\">{title}</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              <Nav.Link as={Link} to=\"all-requests\">Deliver!</Nav.Link>\r\n              <Nav.Link as={Link} to=\"ask-for-delivery\">Ask for delivery!</Nav.Link>\r\n              <Nav.Link as={Link} to=\"my-deliveries\">My deliveries</Nav.Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n          <div className=\"navbar-text\">\r\n            {description}\r\n          </div>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default NavBar;","const FoodStation = {\r\n    None: \"N/A\",\r\n    Pit: \"Pit\",\r\n    Starbucks: \"Starbucks\",\r\n    GrabNGo: \"Grab N' Go\"\r\n}\r\n\r\nexport default FoodStation;","import React from 'react';\r\nimport FoodStation from './FoodStation';\r\n\r\nconst FoodDeliveryForm = (props) => {\r\n    const {\r\n        onFullNameChange, fullName,\r\n        onDormAndRoomChange, dormAndRoom,\r\n        onFoodStationChange, foodStation,\r\n        onOrderNumberChange, orderNumber } = props;\r\n    return (\r\n        <form>\r\n            <div className=\"form-row\">\r\n                <div className=\"form-group col-md-6\">\r\n                    <label htmlFor=\"fullName\">Full Name</label>\r\n                    <input type=\"text\"\r\n                           className=\"form-control\"\r\n                           onChange={onFullNameChange}\r\n                           id=\"fullName\"\r\n                           name=\"fullName\"\r\n                           placeholder=\"Name Surname\"\r\n                           value={fullName} />\r\n                </div>\r\n                <div className=\"form-group col-md-6\">\r\n                    <label htmlFor=\"dormAndRoom\">Dorm + Room #</label>\r\n                    <input type=\"text\"\r\n                           className=\"form-control\"\r\n                           onChange={onDormAndRoomChange}\r\n                           id=\"dormAndRoom\"\r\n                           name=\"dormAndRoom\"\r\n                           placeholder=\"Anderson 101\"\r\n                           value={dormAndRoom} />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-row\">\r\n                <div className=\"form-group col-md-6\">\r\n                    <label htmlFor=\"foodStation\">GrubHub Station</label>\r\n                    <select className=\"form-control\"\r\n                            onChange={onFoodStationChange}\r\n                            id=\"foodStation\"\r\n                            name=\"foodStation\"\r\n                            value={foodStation}>\r\n                        <option disabled value={FoodStation.None}> -- select an option -- </option>\r\n                        <option value={FoodStation.Pit}>Pit</option>\r\n                        <option value={FoodStation.Starbucks}>Starbucks</option>\r\n                        <option value={FoodStation.GrabNGo}>Grab N' Go</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"form-group col-md-6\">\r\n                    <label htmlFor=\"orderNumber\">Order Number(s)</label>\r\n                    <input type=\"text\"\r\n                           className=\"form-control\"\r\n                           onChange={onOrderNumberChange}\r\n                           id=\"orderNumber\"\r\n                           name=\"orderNumber\"\r\n                           placeholder=\"#22, #23\"\r\n                           value={orderNumber} />\r\n                </div>\r\n            </div>\r\n\r\n            <button type=\"submit\"\r\n                    id=\"submitButton\"\r\n                    className=\"btn btn-primary\">Send pick-up request</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default FoodDeliveryForm;\r\n","import React from 'react';\r\n\r\nconst MyDeliveriesPanel = (props) => {\r\n    return (\r\n        <div />\r\n    );\r\n}\r\n\r\nexport default MyDeliveriesPanel;\r\n","import React from 'react';\r\nimport './RequestsPanel.css';\r\n\r\nfunction toLocalDelta(timestamp) {\r\n    return '15 minutes ago';\r\n}\r\n\r\nconst RequestsPanel = (props) => {\r\n    const { requests, haveRequestsLoaded } = props;\r\n    const requestsList = requests.map((req) => (\r\n        <li className=\"list-group-item d-flex justify-content-between align-items-center mb-2\">\r\n           {req.location}\r\n            <div className=\"d-flex align-items-center float-right\">\r\n                <div style={{marginRight: \"1rem\"}}>\r\n                    {toLocalDelta(req.time)}\r\n                </div>\r\n                <button className=\"float-right btn btn-dark\">\r\n                    Deliver!\r\n                </button>\r\n            </div>\r\n        </li>\r\n    ));\r\n\r\n    return (\r\n        <div id=\"requests\">\r\n            <div id=\"load-requests\"\r\n                 style={haveRequestsLoaded ? {display: 'none'} : {}}>\r\n                <img src=\"loading.gif\" alt=\"\" />\r\n            </div>\r\n            <ul id=\"requests-list\"\r\n                className=\"list-group\"\r\n                style={haveRequestsLoaded ? {} : {display: 'none'}}>\r\n                {requestsList}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RequestsPanel;\r\n","import React, { Component } from 'react';\r\nimport NavBar from './NavBar';\r\nimport FoodDeliveryForm from './FoodDeliveryForm';\r\nimport MyDeliveriesPanel from './MyDeliveriesPanel';\r\nimport RequestsPanel from './RequestsPanel';\r\nimport FoodStation from './FoodStation';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            requests: [],\r\n            haveRequestsLoaded: false,\r\n            fullName: '',\r\n            dormAndRoom: '',\r\n            foodStation: FoodStation.None,\r\n            orderNumber: ''\r\n        };\r\n    }\r\n\r\n    fullNameChanged(event) {\r\n        this.setState({\r\n            fullName: event.target.value\r\n        });\r\n    }\r\n    dormAndRoomChanged(event) {\r\n        this.setState({\r\n            dormAndRoom: event.target.value\r\n        });\r\n    }\r\n    foodStationChanged(event) {\r\n        this.setState({\r\n            foodStation: event.target.value\r\n        })\r\n    }\r\n    orderNumberChanged(event) {\r\n        this.setState({\r\n            orderNumber: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div id=\"App\" className=\"container\">\r\n            <Router>\r\n                <div id=\"navBar\">\r\n                    <NavBar\r\n                        title=\"PitBoss\"\r\n                        description=\"Help out and deliver food for students in quarantine! (UR only)\" />\r\n                </div>\r\n                <Route\r\n                    path=\"/\"\r\n                    render={() =>\r\n                    <div id=\"deliveryForm\">\r\n                        <FoodDeliveryForm\r\n                            id=\"deliveryForm\"\r\n                            onFullNameChange={this.fullNameChanged.bind(this)}\r\n                            fullName={this.state.fullName}\r\n                            onDormAndRoomChange={this.dormAndRoomChanged.bind(this)}\r\n                            dormAndRoom={this.state.dormAndRoom}\r\n                            onFoodStationChange={this.foodStationChanged.bind(this)}\r\n                            foodStation={this.state.foodStation}\r\n                            onOrderNumberChange={this.orderNumberChanged.bind(this)}\r\n                            orderNumber={this.state.orderNumber} />\r\n                    </div>}\r\n                    exact />\r\n                <Route\r\n                    path=\"/all-requests\"\r\n                    render={() =>\r\n                        <RequestsPanel\r\n                            requests={this.state.requests}\r\n                            haveRequestsLoaded={this.state.haveRequestsLoaded} />}\r\n                    exact />\r\n                <Route\r\n                    path=\"/ask-for-delivery\"\r\n                    render={() =>\r\n                    <div id=\"deliveryForm\">\r\n                        <FoodDeliveryForm\r\n                            onFullNameChange={this.fullNameChanged.bind(this)}\r\n                            fullName={this.state.fullName}\r\n                            onDormAndRoomChange={this.dormAndRoomChanged.bind(this)}\r\n                            dormAndRoom={this.state.dormAndRoom}\r\n                            onFoodStationChange={this.foodStationChanged.bind(this)}\r\n                            foodStation={this.state.foodStation}\r\n                            onOrderNumberChange={this.orderNumberChanged.bind(this)}\r\n                            orderNumber={this.state.orderNumber} />\r\n                    </div>}\r\n                    exact />\r\n                <Route\r\n                    path=\"/my-deliveries\"\r\n                    render={MyDeliveriesPanel}\r\n                    exact />\r\n            </Router>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}